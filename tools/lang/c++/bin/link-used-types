#!/bin/bash

objfile="$1"

test -n "$objfile" || (echo "Please specify an object file"; false) || exit 1

. $(dirname "$0")/../../../used-types-funcs.sh

usedtypes_src=$( mktemp )
usedtypes_obj=$( mktemp )

# For C++, we have to do the template-to-C-style translation
# and then the usual base types translation.

translate_template_symnames () {
    our_objfile="$1"
    
    candidate_symnames="$( nm -fposix -u "$our_objfile" | \
sed -r 's/[[:blank:]]*[Uw][[:blank:]]*$//' | grep __uniqtype__ )"
    
}

num_and_remainder () {
    grep '^[0-9]' | sed 's/^[0-9]\+/&\n/g'
}

chomp_idents () {
    # next chomp a num, stripping any leading non-numbers
    num_and_remainder="$( sed 's/^[^0-9]*//' | num_and_remainder )"
    if [ -z "$num_and_remainder" ]; then exit 0; fi
    echo "num_and_remainder is $num_and_remainder" 1>&2
    num="$( echo "$num_and_remainder" | head -n1 )"
    remainder="$( echo "$num_and_remainder" | tail -n +2 )"
    # then chomp that many chars from the remainder
    read -N${num} ident <<<"${remainder}"
    echo "$ident"
    # then tail-call if non-empty
    next_chunk="$( echo "$remainder" | tail -c+${num} )"
    if [ -n "$next_chunk" ]; then
        echo "$next_chunk" | chomp_idents
    fi
}

translate_symnames () {
    # anything of the form uniqtype< ... >::obj
    # gets translated to
    # __uniqtype__{...}
    # otherwise we echo as-is
    # N -- uniqtype
    # _Z              N               8uniqtype I   Z                 4main       E     4blah E      3obj E
    # ^- Z-encoding   ^- global ns?   ^-- def   ^-? ^-templ.type.parm             ^expr       ^expr? 
    
    while read line; do case "$line" in
        ('_ZN8uniqtypeI'*'3objE')
            middle_bit="$( echo "$line" | sed 's/_ZN8uniqtypeI\(.*\)3objE/\1/' )"
            # HACK: this is just a quick hack for now
            # -- split 
            idents="$( echo "$middle_bit" | chomp_idents )"
            fragment="$( echo "$idents" | tr '\n' '\f' | sed 's/^\f//; s/\f$//' | sed 's/\f/__DOT_/' )"
            echo __uniqtype__${fragment}
            echo "rewrote $line to __uniqtype__${fragment}" 1>&2
        ;;
        (*) 
            echo "left alone: $line" 1>&2
            echo "$line"
        ;;
    esac; done
}

objcopy_and_redefine_cxx_names () {
    our_objfile="$1"
    
    candidate_symnames="$( nm -fposix -u "$our_objfile" | \
sed -r 's/[[:blank:]]*[Uw][[:blank:]]*$//' | grep '^_ZN8uniqtype' )"

    # What do we want to rewrite? 
    # The template name gives us a C++-style typename which we have to turn into
    # an allocs-style typestr. How do we encode namespace separation in allocs typestrs?

    echo "sed program is $sed_program" 1>&2

    # we need to push candidates into the filter and see what comes out;
    # if it changes, add a --redefine-sym option to the list 
    
    # if any substitutions took effect, issue a redefine-sym command
    while read cand && read canon <&3; do
        if [[ "$cand" != "$canon" ]]; then
            first_redefinition_args="${first_redefinition_args} --redefine-sym ${cand}=${canon}"
        fi
    done<<<"${candidate_symnames}" 3<<<"$( echo "${candidate_symnames}" | translate_symnames "$our_objfile" )"
    
    if [[ -n "${first_redefinition_args}" ]]; then
        # first, lower all undef typenames to canonical ones (but staying codeless)
        echo ${OBJCOPY} $first_redefinition_args "$our_objfile" 1>&2 && \
        ${OBJCOPY} $first_redefinition_args "$our_objfile" && \
        echo "objcopy renamed symbols in $our_objfile according to $first_redefinition_args" 1>&2
        
    else
        echo "No need to replace any C++ typenames" 1>&2
    fi
}

echo ${USEDTYPES} "$objfile" 1>&2 # for debugging
(  objcopy_and_redefine_cxx_names "$objfile" && \
   echo "Successfully did objcopy_and_redefine_cxx_names" 1>&2 && \
   echo ${USEDTYPES} "$objfile" 1>&2 && \
   ${USEDTYPES} "$objfile" > "$usedtypes_src" && \
   echo "Successfully did usedtypes" 1>&2 && \
   compile "$usedtypes_src" "$usedtypes_obj" && \
   echo "Successfully did compile" 1>&2 && \
   objcopy_and_redefine_codeless_names "$objfile" "$usedtypes_obj" && \
   echo "Successfully did objcopy_and_redefine_codeless_names" 1>&2 && \
   link_defining_aliases "$objfile" "$usedtypes_obj" && \
   echo "Successfully did link_defining_aliases" 1>&2 ) || \
    (echo NOT REALLY rm -f "$objfile" 1>&2 ; exit 1)

# rm -f "$usedtypes_src" "$usedtypes_obj"
