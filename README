liballocs is a run-time library (and related toolchain extensions) which
somewhat-transparently adds a reflective notion of "allocations" to Unix
processes. 

To understand what that means, you probably have to read the paper
<http://www.cl.cam.ac.uk/~srk31/#onward15> from Onward! 2015. Or for a
brief introduction you could watch the talk from Strange Loop 2014.
<http://www.youtube.com/watch?v=LwicN2u6Dro>

Here are some things you'll need in order to build this software.

* GNU make 3.81 or later
* GNU bash
* autoconf 2.69 or greater
* automake 1.11 or greater
* libtool
* pkg-config
* autoconf-archive
* g++ 4.8 or later, or some comparably compliant C++ compiler
* boost 1.55 or later (1.55 is "known good" as of this writing)
* libdwarf (a recent version)
* libelf1

There are also a lot of dependencies on my other codebases. These are
now included as git submodules under contrib/, so you can try the (new)
contrib/Makefile method of building them:

  $ git submodule init
  $ git submodule update
  $ make -C contrib

... after which you should get files contrib/config.mk and
contrib/env.sh. Then you can configure and build as follows.

  $ ./autogen.sh     # if not already done
  $ . contrib/env.sh && ./configure <configure options> && make

If any of that doesn't work (tell me, but...) you can still proceed
manually by grabbing and building the following other codebases of mine.
You can find them wherever you found this one (e.g. my GitHub page).
They depend on each other, so build them in order! You have a choice:
build and install them, like third-party libraries, or simply build them
and use their build tree in-place. For the latter, you'll need to set
the relevant environment variables to point to them at configure time.
If you expect to be hacking on any of my code, I recommend the latter
approach, because your hacking might easily stray into these other
codebases.

* libc++fileno
* libsrk31c++
* libdwarfpp
* libantlr3c++
* libcxxgen
* dwarfidl

Finally, for a fully-functioning liballocs toolchain, you'll also want
to grab the following (from the same place):

* binutils-gdb

... i.e. my patched binutils. You can get a long way without it, but in
some awkward cases, liballocs's compilers wrappers need to invoke my
hacked objcopy, which should therefore be on your PATH.
