liballocs is a run-time library (and related toolchain extensions) which
somewhat-transparently adds a reflective notion of "allocations" to Unix
processes. 

To understand what that means, you probably have to read the paper
<http://www.cl.cam.ac.uk/~srk31/#onward15> from Onward! 2015. Or for a
brief introduction you could watch the talk from Strange Loop 2014.
<http://www.youtube.com/watch?v=LwicN2u6Dro>

Here are some things you'll need in order to build this software.

* GNU make 3.81 or later
* GNU bash
* autoconf 2.69 or greater
* automake 1.11 or greater
* libtool
* pkg-config
* autoconf-archive
* g++ 4.8 or later, or some comparably compliant C++ compiler
* boost 1.55 or later (1.55 is "known good" as of this writing)
* libdwarf (a recent version)
* libelf1
* OCaml 4.01.0 or newer
* a Java 6 (or newer) runtime 
* libunwind

There are also a lot of dependencies on my other codebases. These are
now included as git submodules under contrib/, so you can try the (new)
impatient method for building *if* you're on a Debian-based x86-64
GNU/Linux machine with gcc 4.9 or 7.2 and later. (Builds by gcc 5.x 
and 6.x are currently BROKEN pending a fix to bug 78407 
<https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78407>).

The following is tested on Debian jessie; on stretch and certain other
distributions (Fedora), you must first do

$ export LIBDWARFPP_CONFIGURE_FLAGS=--with-libdwarf-includes=/usr/include/libdwarf
$ sudo apt-get install libdw-dev

... or somehow provide your own /usr/include/{lib,}dwarf.h. Then:

$ sudo apt-get install binutils-dev libelf-dev libdwarf-dev \
    autoconf automake libtool pkg-config autoconf-archive \
    g++ ocaml ocaml-findlib \
    default-jre-headless \
    make git gawk gdb \
    libunwind-dev libc6-dev-i386 zlib1g-dev libc6-dbg \
    libboost-{iostreams,regex,serialization,filesystem}-dev
$ git clone https://github.com/stephenrkell/liballocs.git
$ cd liballocs
$ git submodule init
$ git submodule update
$ make -C contrib -jn         # for your favourite n
$ ./autogen.sh
$ . contrib/env.sh
$ ./configure --prefix=/usr/local
$ make -jn                    # for your favourite n

You will also want to set up space to hold metadata files.

$ cd ..
$ export LIBALLOCS=`pwd`/liballocs
$ sudo mkdir /usr/lib/meta # metadata will live here
$ sudo chown root:staff /usr/lib/meta
$ sudo chmod g+w /usr/lib/meta
$ make -f "$LIBALLOCS"/tools/Makefile.meta \
  /usr/lib/meta$( readlink -f /lib/x86_64-linux-gnu/libc.so.6 )-meta.so

Finally, for a fully-functioning liballocs toolchain, you'll also want
to grab the following (from the same place):

* binutils-gdb

... i.e. my patched binutils. You can get a long way without it, but in
some awkward cases, liballocs's compilers wrappers need to invoke my
hacked objcopy, which should therefore be on your PATH.

There are now also some LLVM/clang-based versions of the tools. If you
want them:

$ make -C contrib llvm
$ make llvm
