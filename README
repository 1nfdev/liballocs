liballocs is a run-time library (and related toolchain extensions) which
somewhat-transparently adds a reflective notion of "allocations" to Unix
processes.

To understand what that means, you probably have to read the paper
<http://www.cl.cam.ac.uk/~srk31/#onward15> from Onward! 2015. Or for a
brief introduction you could watch the talk from Strange Loop 2014.
<http://www.youtube.com/watch?v=LwicN2u6Dro>

Here are some things you'll need in order to build this software. Most
of them are standard, but note the caveats about compiler versions.

* C and C++ compilers supporting GNU C extensions
** gcc 4.9.x are known good
** gcc 7.2.x are known good
** gcc 5.x and 6.x are KNOWN BAD (bug 78407)
** clang has been known to work at various times....
* GNU make 3.81 or later
* GNU bash
* autoconf 2.69 or greater
* automake 1.11 or greater
* libtool
* pkg-config
* autoconf-archive
* boost 1.55 or later (1.55 is "known good" as of this writing)
* libelfg0 (i.e. the elfutils implementation)
* OCaml 4.01.0 or newer
* a Java 6 (or newer) runtime 
* libunwind

There are also a lot of dependencies on my other codebases. These are
now included as git submodules under contrib/, so should be handled
automatically by the build process.

First, you must have GNU binutils 2.26 or later. (In fact, for a
fully-functioning liballocs toolchain, you'll also want my *patched*
binutils. However, you can get a long way without it. it's necessary
only to instrument some code making awkward uses of malloc wrappers,
which involves help from my souped-up objcopy. See instructions at the
bottom.)

On Debian-based systems, proceed like so (tested on jessie and
stretch)....

$ sudo apt-get install libelfg0-dev \
    autoconf automake libtool pkg-config autoconf-archive \
    g++ ocaml ocaml-findlib \
    default-jre-headless \
    make git gawk gdb \
    libunwind-dev libc6-dev-i386 zlib1g-dev libc6-dbg \
    libboost-{iostreams,regex,serialization,filesystem}-dev
$ git clone https://github.com/stephenrkell/liballocs.git
$ cd liballocs
$ git submodule init
$ git submodule update
$ make -C contrib -jn         # for your favourite n

If you get errors in the "contrib" build step, please report them on the
relevant repository (e.g. libdwarfpp, dwarfidl, etc) rather than
liballocs.

If it worked, you're ready to build liballocs proper...

$ ./autogen.sh
$ . contrib/env.sh
$ ./configure --prefix=/usr/local
$ make -jn                    # for your favourite n

Then you will also want to set up space to hold metadata files.

$ cd ..
$ export LIBALLOCS=`pwd`/liballocs
$ sudo mkdir /usr/lib/meta # metadata will live here
$ sudo chown root:staff /usr/lib/meta
$ sudo chmod g+w /usr/lib/meta
$ make -f "$LIBALLOCS"/tools/Makefile.meta \
  /usr/lib/meta$( readlink -f /lib/x86_64-linux-gnu/libc.so.6 )-meta.so

If you've got this far, you may as well run the tests.

$ cd liballocs/tests
$ make                        # please report any failures to me

That's it! Enjoy liballocs and do fun things with it. I'd appreciate an
e-mail if you're using it for anything substantial.

Addenda:

1. Here's how to build my patched binutils. If you are doing funky
things with malloc wrappers you may need this; otherwise you should get
by without.

$ sudo apt-get install bison flex texinfo
$ git clone https://github.com/stephenrkell/binutils-gdb.git
$ cd binutils-gdb
$ CFLAGS="-fPIC -g -O2" ./configure --prefix=/usr/local \
      --enable-gold --enable-plugins --enable-install-libiberty \
# a PIC libbfd.a and co-lo'd libiberty helps e.g. build OProfile
$ make -jn                    # for your favourite n
$ sudo make install

Now you should have my patched objcopy on your PATH... it defines an
option --unbind-sym, if you want to check.

2. There are now also some LLVM/clang-based versions of the tools. If
you want them:

$ make -C contrib llvm
$ make llvm

... but be aware that they're a work in progress! In fact they are now
rather bit-rotted. I'd be delighted if someone wanted to forward-port
them....

